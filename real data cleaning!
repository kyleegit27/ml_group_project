{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPqQwssc5QSLpYmcFGbzHzO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kyleegit27/ml_group_project/blob/main/real%20data%20cleaning!\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "iUm8au91808Q",
        "outputId": "54db9fad-613e-419b-e03e-49b0c52f38bc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year Punxsutawney Phil  February Average Temperature  \\\n",
              "0  1895.0         No Record                         26.60   \n",
              "1  1896.0         No Record                         35.04   \n",
              "2  1897.0         No Record                         33.39   \n",
              "3  1898.0       Full Shadow                         35.37   \n",
              "4  1899.0         No Record                         25.50   \n",
              "\n",
              "   February Average Temperature (Northeast)  \\\n",
              "0                                      15.6   \n",
              "1                                      22.2   \n",
              "2                                      23.6   \n",
              "3                                      24.8   \n",
              "4                                      18.1   \n",
              "\n",
              "   February Average Temperature (Midwest)  \\\n",
              "0                                    21.9   \n",
              "1                                    33.5   \n",
              "2                                    34.7   \n",
              "3                                    33.3   \n",
              "4                                    22.2   \n",
              "\n",
              "   February Average Temperature (Pennsylvania)  March Average Temperature  \\\n",
              "0                                         17.0                      39.97   \n",
              "1                                         26.6                      38.03   \n",
              "2                                         27.9                      38.79   \n",
              "3                                         26.7                      41.05   \n",
              "4                                         20.0                      37.63   \n",
              "\n",
              "   March Average Temperature (Northeast)  March Average Temperature (Midwest)  \\\n",
              "0                                   27.6                                 40.2   \n",
              "1                                   25.3                                 36.9   \n",
              "2                                   32.0                                 44.0   \n",
              "3                                   38.0                                 46.0   \n",
              "4                                   29.3                                 38.4   \n",
              "\n",
              "   March Average Temperature (Pennsylvania)  \n",
              "0                                      31.3  \n",
              "1                                      27.8  \n",
              "2                                      36.9  \n",
              "3                                      42.0  \n",
              "4                                      34.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c65809c-58c0-4680-8467-508ff0e35fe0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Punxsutawney Phil</th>\n",
              "      <th>February Average Temperature</th>\n",
              "      <th>February Average Temperature (Northeast)</th>\n",
              "      <th>February Average Temperature (Midwest)</th>\n",
              "      <th>February Average Temperature (Pennsylvania)</th>\n",
              "      <th>March Average Temperature</th>\n",
              "      <th>March Average Temperature (Northeast)</th>\n",
              "      <th>March Average Temperature (Midwest)</th>\n",
              "      <th>March Average Temperature (Pennsylvania)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1895.0</td>\n",
              "      <td>No Record</td>\n",
              "      <td>26.60</td>\n",
              "      <td>15.6</td>\n",
              "      <td>21.9</td>\n",
              "      <td>17.0</td>\n",
              "      <td>39.97</td>\n",
              "      <td>27.6</td>\n",
              "      <td>40.2</td>\n",
              "      <td>31.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1896.0</td>\n",
              "      <td>No Record</td>\n",
              "      <td>35.04</td>\n",
              "      <td>22.2</td>\n",
              "      <td>33.5</td>\n",
              "      <td>26.6</td>\n",
              "      <td>38.03</td>\n",
              "      <td>25.3</td>\n",
              "      <td>36.9</td>\n",
              "      <td>27.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1897.0</td>\n",
              "      <td>No Record</td>\n",
              "      <td>33.39</td>\n",
              "      <td>23.6</td>\n",
              "      <td>34.7</td>\n",
              "      <td>27.9</td>\n",
              "      <td>38.79</td>\n",
              "      <td>32.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>36.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1898.0</td>\n",
              "      <td>Full Shadow</td>\n",
              "      <td>35.37</td>\n",
              "      <td>24.8</td>\n",
              "      <td>33.3</td>\n",
              "      <td>26.7</td>\n",
              "      <td>41.05</td>\n",
              "      <td>38.0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1899.0</td>\n",
              "      <td>No Record</td>\n",
              "      <td>25.50</td>\n",
              "      <td>18.1</td>\n",
              "      <td>22.2</td>\n",
              "      <td>20.0</td>\n",
              "      <td>37.63</td>\n",
              "      <td>29.3</td>\n",
              "      <td>38.4</td>\n",
              "      <td>34.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c65809c-58c0-4680-8467-508ff0e35fe0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c65809c-58c0-4680-8467-508ff0e35fe0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c65809c-58c0-4680-8467-508ff0e35fe0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e6e9e0bc-ab76-4514-9a92-90acb021cc34\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e6e9e0bc-ab76-4514-9a92-90acb021cc34')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e6e9e0bc-ab76-4514-9a92-90acb021cc34 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 122,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.36240942017385,\n        \"min\": 1895.0,\n        \"max\": 2016.0,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1913.0,\n          1940.0,\n          1942.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Punxsutawney Phil\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Full Shadow\",\n          \"Partial Shadow\",\n          \"No Record\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"February Average Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.282860835853222,\n        \"min\": 25.23,\n        \"max\": 41.41,\n        \"num_unique_values\": 116,\n        \"samples\": [\n          32.85,\n          25.5,\n          36.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"February Average Temperature (Northeast)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.28317364580888,\n        \"min\": 10.4,\n        \"max\": 31.6,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          27.2,\n          15.6,\n          21.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"February Average Temperature (Midwest)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.863819863663733,\n        \"min\": 20.3,\n        \"max\": 41.4,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          29.4,\n          34.1,\n          29.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"February Average Temperature (Pennsylvania)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.530900096394944,\n        \"min\": 15.2,\n        \"max\": 35.8,\n        \"num_unique_values\": 86,\n        \"samples\": [\n          30.9,\n          17.0,\n          26.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"March Average Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9483208303604442,\n        \"min\": 35.44,\n        \"max\": 50.41,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          42.03,\n          45.12,\n          37.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"March Average Temperature (Northeast)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8895551253705483,\n        \"min\": 24.2,\n        \"max\": 43.4,\n        \"num_unique_values\": 82,\n        \"samples\": [\n          35.2,\n          27.6,\n          32.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"March Average Temperature (Midwest)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.511401203731162,\n        \"min\": 28.5,\n        \"max\": 56.3,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          37.2,\n          40.2,\n          35.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"March Average Temperature (Pennsylvania)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.208955233704441,\n        \"min\": 24.5,\n        \"max\": 47.7,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          39.7,\n          31.3,\n          37.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"archive.csv\")\n",
        "\n",
        "# year to numeric\n",
        "df[\"Year\"] = pd.to_numeric(df[\"Year\"], errors=\"coerce\")\n",
        "\n",
        "# drop rows where most of the temperature data is missing\n",
        "df = df.dropna(thresh=5)  # keep rows with at least 5 non-NaN values\n",
        "\n",
        "# drop rows where 'Punxsutawney Phil' is missing\n",
        "df = df.dropna(subset=[\"Punxsutawney Phil\"])\n",
        "\n",
        "# reset index after dropping rows\n",
        "df = df.reset_index(drop=True)\n",
        "\n",
        "# Save cleaned version if needed\n",
        "df.to_csv(\"cleaned_archive.csv\", index=False)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.read_csv(\"bar_locations.csv\")\n",
        "df.columns = df.columns.str.strip()\n",
        "df = df.dropna()\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_bar_locations.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "paj8ozzf-wh8",
        "outputId": "84f07b74-364d-4db7-f4cc-0b49b22cbcff"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         Location Type  Incident Zip           City        Borough   Latitude  \\\n",
            "0  Club/Bar/Restaurant       10308.0  STATEN ISLAND  STATEN ISLAND  40.544096   \n",
            "1  Club/Bar/Restaurant       10012.0       NEW YORK      MANHATTAN  40.729793   \n",
            "2  Club/Bar/Restaurant       10308.0  STATEN ISLAND  STATEN ISLAND  40.544209   \n",
            "3  Club/Bar/Restaurant       10034.0       NEW YORK      MANHATTAN  40.866376   \n",
            "4  Club/Bar/Restaurant       11220.0       BROOKLYN       BROOKLYN  40.635207   \n",
            "\n",
            "   Longitude  num_calls  \n",
            "0 -74.141155         40  \n",
            "1 -73.998842         18  \n",
            "2 -74.141040         21  \n",
            "3 -73.928258        160  \n",
            "4 -74.020285         17  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "df = pd.read_csv(\"camera_dataset.csv\")\n",
        "\n",
        "# replace 0s with NaN in a couple columns\n",
        "columns_to_clean = ['Effective pixels', 'Weight (inc. batteries)', 'Dimensions', 'Price']\n",
        "df[columns_to_clean] = df[columns_to_clean].replace(0, np.nan)\n",
        "\n",
        "df = df.dropna()\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_camera_dataset.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HEuNbI4k_IUm",
        "outputId": "32274f9a-a136-4e27-b8a8-343de81b0fe1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                  Model  Release date  Max resolution  Low resolution  \\\n",
            "0      Agfa ePhoto 1680          1998          1280.0           640.0   \n",
            "1      Agfa ePhoto CL45          2001          1600.0           640.0   \n",
            "2   Canon PowerShot A10          2001          1280.0          1024.0   \n",
            "3  Canon PowerShot A100          2002          1280.0          1024.0   \n",
            "4   Canon PowerShot A20          2001          1600.0          1024.0   \n",
            "\n",
            "   Effective pixels  Zoom wide (W)  Zoom tele (T)  Normal focus range  \\\n",
            "0               1.0           38.0          114.0                50.0   \n",
            "1               1.0           51.0           51.0                50.0   \n",
            "2               1.0           35.0          105.0                76.0   \n",
            "3               1.0           39.0           39.0                20.0   \n",
            "4               1.0           35.0          105.0                76.0   \n",
            "\n",
            "   Macro focus range  Storage included  Weight (inc. batteries)  Dimensions  \\\n",
            "0                0.0               4.0                    420.0       158.0   \n",
            "1               20.0               8.0                    270.0       119.0   \n",
            "2               16.0               8.0                    375.0       110.0   \n",
            "3                5.0               8.0                    225.0       110.0   \n",
            "4               16.0               8.0                    375.0       110.0   \n",
            "\n",
            "   Price  \n",
            "0  179.0  \n",
            "1  179.0  \n",
            "2  139.0  \n",
            "3  139.0  \n",
            "4  139.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.read_csv(\"cereal.csv\")\n",
        "\n",
        "# replace -1 with NaN (-1 placeholder for missing data)\n",
        "df = df.replace(-1, np.nan)\n",
        "df = df.dropna()\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_cereal.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3rwL4KuR_eY0",
        "outputId": "a1f77eb6-91f7-42c8-d77c-fe2288fa7486"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                        name mfr type  calories  protein  fat  sodium  fiber  \\\n",
            "0                  100% Bran   N    C        70        4    1     130   10.0   \n",
            "1          100% Natural Bran   Q    C       120        3    5      15    2.0   \n",
            "2                   All-Bran   K    C        70        4    1     260    9.0   \n",
            "3  All-Bran with Extra Fiber   K    C        50        4    0     140   14.0   \n",
            "4    Apple Cinnamon Cheerios   G    C       110        2    2     180    1.5   \n",
            "\n",
            "   carbo  sugars  potass  vitamins  shelf  weight  cups     rating  \n",
            "0    5.0     6.0   280.0        25      3     1.0  0.33  68.402973  \n",
            "1    8.0     8.0   135.0         0      3     1.0  1.00  33.983679  \n",
            "2    7.0     5.0   320.0        25      3     1.0  0.33  59.425505  \n",
            "3    8.0     0.0   330.0        25      3     1.0  0.50  93.704912  \n",
            "4   10.5    10.0    70.0        25      1     1.0  0.75  29.509541  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.read_csv(\"degrees-that-pay-back.csv\")\n",
        "\n",
        "# columns to convert\n",
        "salary_columns = [\n",
        "    'Starting Median Salary', 'Mid-Career Median Salary',\n",
        "    'Mid-Career 10th Percentile Salary', 'Mid-Career 25th Percentile Salary',\n",
        "    'Mid-Career 75th Percentile Salary', 'Mid-Career 90th Percentile Salary'\n",
        "]\n",
        "\n",
        "for col in salary_columns:\n",
        "    df[col] = df[col].replace({'\\$': '', ',': ''}, regex=True).astype(float)\n",
        "\n",
        "df = df.dropna()\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_degrees_that_pay_back.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QzC01kVJ_6_B",
        "outputId": "0f94ed21-fc24-4dbc-a5bc-b5bec8b0aead"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Undergraduate Major  Starting Median Salary  Mid-Career Median Salary  \\\n",
            "0             Accounting                 46000.0                   77100.0   \n",
            "1  Aerospace Engineering                 57700.0                  101000.0   \n",
            "2            Agriculture                 42600.0                   71900.0   \n",
            "3           Anthropology                 36800.0                   61500.0   \n",
            "4           Architecture                 41600.0                   76800.0   \n",
            "\n",
            "   Percent change from Starting to Mid-Career Salary  \\\n",
            "0                                               67.6   \n",
            "1                                               75.0   \n",
            "2                                               68.8   \n",
            "3                                               67.1   \n",
            "4                                               84.6   \n",
            "\n",
            "   Mid-Career 10th Percentile Salary  Mid-Career 25th Percentile Salary  \\\n",
            "0                            42200.0                            56100.0   \n",
            "1                            64300.0                            82100.0   \n",
            "2                            36300.0                            52100.0   \n",
            "3                            33800.0                            45500.0   \n",
            "4                            50600.0                            62200.0   \n",
            "\n",
            "   Mid-Career 75th Percentile Salary  Mid-Career 90th Percentile Salary  \n",
            "0                           108000.0                           152000.0  \n",
            "1                           127000.0                           161000.0  \n",
            "2                            96300.0                           150000.0  \n",
            "3                            89300.0                           138000.0  \n",
            "4                            97000.0                           136000.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"SEAN_OC_through_2013.csv\", skiprows=14)\n",
        "\n",
        "# drop rows  missing key msrmts\n",
        "df = df.dropna(subset=[\"temperature\", \"salinity\", \"oxygen\"])\n",
        "\n",
        "# convert to float\n",
        "columns_to_float = [\"temperature\", \"salinity\", \"oxygen\", \"depth\", \"pressure\"]\n",
        "for col in columns_to_float:\n",
        "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
        "\n",
        "df = df.dropna(subset=columns_to_float)\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_SEAN_OC.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bw8AnrAYAbIB",
        "outputId": "bec3f4cf-5367-40d3-98ff-b85be8a73eda"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-034ed97805f7>:1: DtypeWarning: Columns (25) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df = pd.read_csv(\"SEAN_OC_through_2013.csv\", skiprows=14)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  region_name  ctd observer  dump  cast  station  depth  vessel  latitude  \\\n",
            "0   Lower Bay    1  Sharman   182     1        1      1  Boomer  58.41223   \n",
            "1   Lower Bay    1  Sharman   182     1        1      2  Boomer  58.41223   \n",
            "2   Lower Bay    1  Sharman   182     1        1      3  Boomer  58.41223   \n",
            "3   Lower Bay    1  Sharman   182     1        1      4  Boomer  58.41223   \n",
            "4   Lower Bay    1  Sharman   182     1        1      5  Boomer  58.41223   \n",
            "\n",
            "   longitude  ... par sbe_data_flag  data_quality  \\\n",
            "0  -135.9963  ... NaN             0             4   \n",
            "1  -135.9963  ... NaN             0             4   \n",
            "2  -135.9963  ... NaN             0             4   \n",
            "3  -135.9963  ... NaN             0             4   \n",
            "4  -135.9963  ... NaN             0             4   \n",
            "\n",
            "                                data_quality_comment  comments  \\\n",
            "0  PAR sensor disqualified for this cruise becaus...       NaN   \n",
            "1  PAR sensor disqualified for this cruise becaus...       NaN   \n",
            "2  PAR sensor disqualified for this cruise becaus...       NaN   \n",
            "3  PAR sensor disqualified for this cruise becaus...       NaN   \n",
            "4  PAR sensor disqualified for this cruise becaus...       NaN   \n",
            "\n",
            "             time_stamp  protocol_id     userid  Submission_number  \\\n",
            "0  1/15/2010 2:30:25 PM    OC-2009.1  wfjohnson                 26   \n",
            "1  1/15/2010 2:30:25 PM    OC-2009.1  wfjohnson                 26   \n",
            "2  1/15/2010 2:30:25 PM    OC-2009.1  wfjohnson                 26   \n",
            "3  1/15/2010 2:30:25 PM    OC-2009.1  wfjohnson                 26   \n",
            "4  1/15/2010 2:30:25 PM    OC-2009.1  wfjohnson                 26   \n",
            "\n",
            "   cruise_year  \n",
            "0         2009  \n",
            "1         2009  \n",
            "2         2009  \n",
            "3         2009  \n",
            "4         2009  \n",
            "\n",
            "[5 rows x 32 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"tbl_Fish.csv\")\n",
        "df = df.dropna()\n",
        "\n",
        "columns_to_numeric = ['Number', 'Min', 'Max', 'AvgLgth', 'Area']\n",
        "for col in columns_to_numeric:\n",
        "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "df = df.dropna(subset=columns_to_numeric)\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_tbl_Fish.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TWZdg5oAA3Ap",
        "outputId": "a23ceea0-959d-46a2-b73f-2a1df1d9a772"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                           Fish_ID                         Event_ID  \\\n",
            "0  20100121181630-216733515.262604  20100121181630-533424019.813538   \n",
            "1  20100121181630-300970494.747162  20090720144120-984649658.203125   \n",
            "2  20100121181630-344180822.372437  20090720145227-59677302.8373718   \n",
            "3  20100121181630-647821187.973022  20090720142848-938545167.446136   \n",
            "4  20100121181630-721895098.686218  20090720143748-152676820.755005   \n",
            "\n",
            "                          Taxon_ID  Number  Min  Max  AvgLgth  Area  \\\n",
            "0  20180301132624-56236863.1362915       1   12   12       12    50   \n",
            "1  20180301132624-56236863.1362915       1   22   22       22   100   \n",
            "2  20180301132624-56236863.1362915       3   10   10       10    50   \n",
            "3  20180301132624-56236863.1362915       1   10   10       10    50   \n",
            "4  20180301132624-56236863.1362915       1   12   12       12    50   \n",
            "\n",
            "                                            Comments  \n",
            "0  Original detected species name was Ctenochaetu...  \n",
            "1  Original detected species name was Ctenochaetu...  \n",
            "2  Original detected species name was Ctenochaetu...  \n",
            "3  Original detected species name was Ctenochaetu...  \n",
            "4  Original detected species name was Ctenochaetu...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"tbl_Points.csv\")\n",
        "df[\"X\"] = pd.to_numeric(df[\"X\"], errors=\"coerce\")\n",
        "df[\"Y\"] = pd.to_numeric(df[\"Y\"], errors=\"coerce\")\n",
        "df[\"Point\"] = pd.to_numeric(df[\"Point\"], errors=\"coerce\")\n",
        "df = df.dropna(subset=[\"X\", \"Y\", \"Point\"])\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_tbl_Points.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nTawmAKTBBpm",
        "outputId": "15e78648-dffd-498e-9bdf-dffd46d5671b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-f7fa437e883e>:2: DtypeWarning: Columns (5,6) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df = pd.read_csv(\"tbl_Points.csv\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                       Benthic_ID                         Taxon_ID  Point  \\\n",
            "0  20081211093444-14017641.544342  20160411125756-634371936.321259      1   \n",
            "1  20081211093444-14017641.544342  20160411125756-634371936.321259     10   \n",
            "2  20081211093444-14017641.544342  20160411125756-634371936.321259     13   \n",
            "3  20081211093444-14017641.544342  20160411125756-634371936.321259     14   \n",
            "4  20081211093444-14017641.544342  20160411125756-634371936.321259     17   \n",
            "\n",
            "        X       Y Bleaching Bleaching_Cat  \n",
            "0  2196.0  1882.0       NaN           NaN  \n",
            "1  1734.0  1517.0       NaN           NaN  \n",
            "2  1922.0  1420.0       NaN           NaN  \n",
            "3   203.0  1025.0       NaN           NaN  \n",
            "4  2581.0  1582.0       NaN           NaN  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"test.csv\")\n",
        "df[\"Date\"] = pd.to_datetime(df[\"Date\"], errors=\"coerce\")\n",
        "df[\"number_sold\"] = pd.to_numeric(df[\"number_sold\"], errors=\"coerce\")\n",
        "df = df.dropna()\n",
        "df = df.reset_index(drop=True)\n",
        "df.to_csv(\"cleaned_test.csv\", index=False)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YCOoVzKqCDT7",
        "outputId": "ae868437-acf0-4c6a-89ac-dd18b9f824f8"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        Date  store  product  number_sold\n",
            "0 2019-01-01      0        0          845\n",
            "1 2019-01-02      0        0          851\n",
            "2 2019-01-03      0        0          840\n",
            "3 2019-01-04      0        0          842\n",
            "4 2019-01-05      0        0          845\n"
          ]
        }
      ]
    }
  ]
}